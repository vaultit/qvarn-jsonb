# Manage a subject

    SCENARIO user manages a subject resource

    GIVEN a running Qvarn instance

    WHEN client requests GET /subjects without token
    THEN HTTP status code is 401 Unauthorized

    WHEN client requests GET /subjects/notexist without token
    THEN HTTP status code is 401 Unauthorized

    WHEN client gets an authorization token with scope 
    ... "uapi_subjects_get uapi_subjects_post uapi_subjects_id_get 
    ...  uapi_subjects_id_put uapi_subjects_id_delete"
    AND client requests GET /subjects using token
    THEN HTTP status code is 200 OK

    WHEN client requests GET /subjects using  token
    THEN HTTP status code is 200 OK
    AND search result does NOT contain { "id": "subject" }

    WHEN client requests POST /subjects with token and body
    ... {
    ...     "non-existent": []
    ... }
    THEN HTTP status code is 400 Bad client

    WHEN client requests POST /subjects with token and body
    ... {
    ...     "type": "subject",
    ...     "names": [
    ...         { "full_name": "Jason Bourne" }
    ...     ]
    ... }
    THEN HTTP status code is 201 Created
    AND resource id is ID1
    AND revision is REV1

    WHEN client requests GET /subjects/${ID1} without token
    THEN HTTP status code is 401 Unauthorized

    WHEN client requests GET /subjects/${ID1} using token
    THEN HTTP status code is 200 OK
    AND JSON body matches
    ... {
    ...     "revision": "${REV1}",
    ...     "id": "${ID1}",
    ...     "type": "subject",
    ...     "random_id": null,
    ...     "names": [
    ...         {
    ...             "full_name": "Jason Bourne",
    ...             "sort_key": null,
    ...             "titles": [],
    ...             "given_names": [],
    ...             "surnames": []

    ...         }
    ...     ]
    ... }

For silly hysterical raisins, the Qvarn API is defined to return 400
if updating a resource with the wrong revision in the body, instead
of 404. We may want to fix this some day.

    WHEN client requests PUT /subjects/${ID1} with token and body
    ... { "id": "wrong", "revision": "${REV1}", "names": [{"full_name": "Dave Webb"}]}
    THEN HTTP status code is 400 Bad

    WHEN client requests PUT /subjects/${ID1} with token and body
    ... { "id": "${ID1}", "revision": "${REV1}", "names": [{"full_name": "Dave Webb"}]}
    THEN HTTP status code is 200 OK
    AND revision is REV2

    WHEN client requests PUT /subjects/${ID1} with token and body
    ... { "type": "subject", "id": "${ID1}", "revision": "${REV2}",
    ...   "names": [{"full_name": "David Webb" }]}
    THEN HTTP status code is 200 OK
    AND revision is REV3

    WHEN client requests GET /subjects/${ID1} using token
    THEN HTTP status code is 200 OK
    AND JSON body matches
    ... { "revision": "${REV3}", "id": "${ID1}", "type": "subject",
    ...   "names": [{"full_name": "David Webb" }]}

    WHEN client requests DELETE /subjects/${ID1} with token
    THEN HTTP status code is 200 OK

    WHEN client requests GET /subjects/${ID1} using token
    THEN HTTP status code is 404 Not Found

    FINALLY qvarn is stopped
