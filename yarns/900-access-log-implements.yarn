# Step implementations for access log

This chapter shows the scenario step implementations for the
access log scenario.

    IMPLEMENTS GIVEN test client has id CLIENT
    V['CLIENT'] = 'test_client'

    IMPLEMENTS GIVEN a running access log Qvarn instance
    if use_remote_qvarn():
        qvarn_vars = {
            'url': os.environ['QVARN_URL']
        }
        save_qvarn('access', qvarn_vars)
    else:
        start_qvarn('access', audience=V['CLIENT'])

    IMPLEMENTS FINALLY access log Qvarn is stopped
    if not use_remote_qvarn():
        stop_qvarn('access')

    IMPLEMENTS GIVEN users A and B who can fully access person resources
    V['scopes'] = ' '.join([
        'uapi_persons_get',
        'uapi_persons_post',
        'uapi_persons_id_get',
        'uapi_persons_id_put',
        'uapi_persons_id_delete',
        'uapi_persons_search_id_get',
        'uapi_access_get',
        'uapi_access_post',
        'uapi_access_id_get',
        'uapi_access_id_put',
        'uapi_access_id_delete',
        'uapi_access_search_id_get',
        'uapi_set_meta_fields',
    ])

    IMPLEMENTS GIVEN user (\S+) has person resource (\S+)
    name = get_next_match()
    rid = get_next_match()
    token = new_token_for_user('access', name, V['scopes'])
    person = {
        'names': ['User {}'.format(name)],
    }
    request(post_to_qvarn, 'access', '/persons', body=person, token=token)
    obj = get_json()
    V[rid] = obj['id']

    IMPLEMENTS WHEN user A creates a person resource
    token = new_token_for_user('access', V['A_ID'], V['scopes'], force=True)
    person = {
        'names': ['New person created by A'],
    }
    request(post_to_qvarn, 'access', '/persons', body=person, token=token)

    IMPLEMENTS THEN access log contains only one entry
    token = new_token_for_user('access', '', V['scopes'])
    path = '/access/search/exact/resource_id/{}'.format(V['ID'])
    request(get_from_qvarn, 'access', path, token=token)
    assertEqual(get_status(), 200)
    logs = get_json()['resources']
    assertEqual(len(logs), 1)

    IMPLEMENTS THEN access log contains entry (.+)
    token = new_token_for_user('access', '', V['scopes'])
    expected = json.loads(expand_vars(get_next_match(), V))
    path = '/access/search/show_all/exact/resource_id/{}'.format(V['ID'])
    request(get_from_qvarn, 'access', path, token=token)
    logs = get_json()['resources']
    filtered_logs = [{k: l[k] for k in expected.keys()} for l in logs]
    assertIn(expected, filtered_logs)

    IMPLEMENTS WHEN user B requests GET (/.+), with header (.+): (.+)
    token = new_token_for_user('access', V['B_ID'], V['scopes'], force=True)
    path = expand_vars(get_next_match(), V)
    header_key = get_next_match()
    header_value = get_next_match()
    headers = {
        header_key: header_value,
    }
    request(get_from_qvarn, 'access', path, headers=headers, token=token)

    IMPLEMENTS WHEN user A updates (/.+) without changing it
    token = new_token_for_user('access', V['A_ID'], V['scopes'], force=True)
    path = expand_vars(get_next_match(), V)
    request(get_from_qvarn, 'access', path, token=token)
    assertEqual(get_status(), 200)
    body = get_json()
    request(put_to_qvarn, 'access', path, token=token, body=body)

    IMPLEMENTS WHEN user A deletes (/.+)
    token = new_token_for_user('access', V['A_ID'], V['scopes'])
    path = expand_vars(get_next_match(), V)
    delete_from_qvarn('access', path, token=token)
    assertEqual(get_status(), 200)
    request(get_from_qvarn, 'access', path, token=token)
    assertEqual(get_status(), 404)

    IMPLEMENTS WHEN test client requests GET (/.+), with header (.+)
    token = new_token_for_user('access', '', V['scopes'], force=True)
    path = expand_vars(get_next_match(), V)
    header = get_next_match()
    header_dict = {}
    for h in re.findall('[a-zA-Z-]+: .+?(?=(?: [a-zA-Z-]+: )|\Z)', header):
        key, value = h.split(': ', 1)
        header_dict[key] = value
    request(get_from_qvarn, 'access', path, headers=header_dict, token=token)

    IMPLEMENTS WHEN access log can be listed
    token = new_token_for_user('access', '', V['scopes'])
    request(get_from_qvarn, 'access', '/access', token=token)
    assertEqual(get_status(), 200)

    IMPLEMENTS WHEN there is an entry (.+) in access log
    token = new_token_for_user('access', '', V['scopes'])
    request(get_from_qvarn, 'access', '/access/search/show_all', token=token)
    assertEqual(get_status(), 200)
    logs = get_json()['resources']
    assertGreaterThan(len(logs), 0)
    V[get_next_match()] = logs[0]

    IMPLEMENTS THEN access log entry cannot be added, with body (.+)
    token = new_token_for_user('access', '', V['scopes'])
    entry = json.loads(expand_vars(get_next_match(), V))
    request(post_to_qvarn, 'access', '/access', body=entry, token=token)
    assertEqual(get_status(), 405)

    IMPLEMENTS THEN access log entry (.+) cannot be updated
    token = new_token_for_user('access', '', V['scopes'], force=True)
    entry = V[get_next_match()]
    path = '/access/{}'.format(entry['id'])
    request(put_to_qvarn, 'access', path, body=entry, token=token)
    assertEqual(get_status(), 405)

    IMPLEMENTS WHEN new access log entries are generated
    token = new_token_for_user('access', '', V['scopes'], force=True)
    time.sleep(2)
    person = {'names': ['Person']}
    request(post_to_qvarn, 'access', '/persons', body=person, token=token)

    IMPLEMENTS WHEN user deletes old entries with access log tool
    qvarn_vars = get_qvarn('access')
    token = new_token_for_user('access', '', V['scopes'], force=True)
    delete_access(qvarn_vars, 1, token=token)

    IMPLEMENTS THEN no old access log entries are found
    qvarn_vars = get_qvarn('access')
    request(get_from_qvarn, 'access', '/access', token=token)
    assertEqual(get_status(), 200)
    logs = get_json()['resources']
    assertEqual(len(logs), 1)
