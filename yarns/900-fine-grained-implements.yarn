# Step implementations for fine-grained access control

This chapter shows the scenario step implementations for the
fine-grained access control scenarios.

    IMPLEMENTS GIVEN a Qvarn with fine-grained access disabled
    start_qvarn('default')

    IMPLEMENTS GIVEN user (\S+) with access to Qvarn person resources
    V['scopes'] = ' '.join([
        'uapi_resource_types_id_get',
        'uapi_persons_post',
        'uapi_persons_get',
        'uapi_persons_id_get',
        'uapi_persons_listeners_get',
        'uapi_allow_post',
        'uapi_set_meta_fields',
        'uapi_trusted_client',
    ])

    IMPLEMENTS GIVEN a person resource for (\S+)
    name = get_next_match()
    token = new_token_for_user('default', '', V['scopes'])
    person = {
        'names': [{ 'full_name': name }],
    }
    request(post_to_qvarn, 'default', '/persons', token=token, body=person)
    assertEqual(get_status(), 201)
    person = get_json()
    key = '{}_id'.format(name)
    V[key] = person['id']

    IMPLEMENTS GIVEN an organisation resource for (\S+)
    # We don't actually need to do anything here.
    pass

    IMPLEMENTS GIVEN an employment contract resource between (\S+) and (\S+)
    # We don't actually need to do anything here.
    pass

    IMPLEMENTS WHEN user (\S+) lists all persons in Qvarn
    user = get_next_match()
    token = new_token_for_user('default', '', V['scopes'])
    fake_token = fake_token(user)
    headers = {
        'Qvarn-Access-By': fake_token,
    }
    request(
        get_from_qvarn, 'default', '/persons', token=token, headers=headers)

    IMPLEMENTS THEN they see resources? (.+)
    names = [s.strip() for s in get_next_match().split(',')]
    keys = ['{}_id'.format(s) for s in names]
    ids = [V[key] for key in keys]
    assertEqual(get_status(), 200)
    resources = get_json()
    actual_ids = [r['id'] for r in resources['resources']]
    print('ids', ids)
    print('actual_ids', actual_ids)
    assertEqual(set(ids), set(actual_ids))

    IMPLEMENTS WHEN user (\S+) looks at person (\S+) in Qvarn
    user = get_next_match()
    person_name = get_next_match()
    key = '{}_id'.format(person_name)
    person_id = V[key]
    token = new_token_for_user('default', user, V['scopes'])
    fake_token = fake_token(user)
    headers = {
        'Qvarn-Access-By': fake_token,
    }
    path = '/persons/{}'.format(person_id)
    request(get_from_qvarn, 'default', path, token=token, headers=headers)

    IMPLEMENTS THEN they see that person resource
    assertEqual(get_status(), 200)

    IMPLEMENTS GIVEN rule that allows (\S+) to see the (\S+) person resource
    user = get_next_match()
    person_name = get_next_match()
    key = '{}_id'.format(person_name)
    person_id = V[key]
    allow = {
        'method': 'GET',
        'client_id': '*',
        'subpath': '',
        'user_id': user,
        'resource_id': person_id,
        'resource_type': None,
        'resource_field': None,
        'resource_value': None,
    }
    token = new_token_for_user('default', '', V['scopes'])
    add_allow_rule('default', allow, token)

    IMPLEMENTS GIVEN rules that allow (\S+) to see (.+) resources
    user = get_next_match()
    names = [s.strip() for s in get_next_match().split(',')]
    keys = ['{}_id'.format(s) for s in names]
    ids = [V[key] for key in keys]
    token = new_token_for_user('default', '', V['scopes'])
    for resource_id in ids:
        allow = {
            'method': 'GET',
            'client_id': '*',
            'subpath': '',
            'user_id': user,
            'resource_id': resource_id,
            'resource_type': None,
            'resource_field': None,
            'resource_value': None,
        }
        add_allow_rule('default', allow, token)

    IMPLEMENTS THEN the resource is not found
    assertEqual(get_status(), 404)

    IMPLEMENTS THEN they see only (.+), but not (\S+)
    names = [s.strip() for s in get_next_match().split(',')]
    keys = ['{}_id'.format(s) for s in names]
    ids = [V[key] for key in keys]
    unwanted_name = get_next_match()
    unwanted_id = V['{}_id'.format(unwanted_name)]
    assertEqual(get_status(), 200)
    resources = get_json()
    actual_ids = [r['id'] for r in resources['resources']]
    print('names', names)
    print('keys', keys)
    print('ids', ids)
    print('unwanted_id', unwanted_id)
    print('actual_ids', actual_ids)
    assertTrue(unwanted_id not in actual_ids)
    assertEqual(set(ids), set(actual_ids))
