# Step implementations (local and remote)

This chapter shows the scenario step implementations regardless of
whether we're testing a local or remote Qvarn.


## Are we running locally or remotely?

    IMPLEMENTS ASSUMING we are using a local Qvarn
    assertTrue(not use_remote_qvarn())

    IMPLEMENTS ASSUMING we are using a remote Qvarn
    assertTrue(use_remote_qvarn())

    IMPLEMENTS ASSUMING remote Qvarn has fine-grained access control enabled
    assertEqual(os.environ.get('QVARN_REMOTE_FINE_GRAINED'), 'yes')


## API access token creation

    IMPLEMENTS WHEN client gets an authorization token with scope "(.+)"
    scopes = get_next_match()
    scopes = scopes.split()
    scopes.append('uapi_trusted_client')
    scopes = ' '.join(scopes)
    V['token'] = new_token_for_user('default', '', scopes, force=True)

## API requests of various kinds

    IMPLEMENTS WHEN client requests GET (/.+) without token
    path = get_next_match()
    path = expand_vars(path, V)
    request(get_from_qvarn, 'default', path)

    IMPLEMENTS WHEN client requests GET (/.+) using token
    path = get_next_match()
    path = expand_vars(path, V)
    token = V['token']
    request(get_from_qvarn, 'default', path, token=token)

    IMPLEMENTS WHEN client requests GET (/.+) with token and body (.+)
    path = get_next_match()
    body = get_next_match()
    body = expand_vars(body, V)
    body = json.loads(body)
    token = V['token']
    request(get_from_qvarn, 'default', path, token=token, body=body)

    IMPLEMENTS WHEN client requests POST (/.+) with token and body (.+)
    path = get_next_match()
    body = json.loads(get_next_match())
    token = V['token']
    print 'token', token
    print 'scopes', V['scopes']
    request(post_to_qvarn, 'default', path, token=token, body=body)

    IMPLEMENTS WHEN client requests PUT (/.+) with token and body (.+)
    path = get_next_match()
    path = expand_vars(path, V)
    body = get_next_match()
    body = expand_vars(body, V)
    body = json.loads(body)
    token = V['token']
    request(put_to_qvarn, 'default', path, body=body, token=token)

    IMPLEMENTS WHEN client requests PUT (/[a-z0-9/${}]+) with token, revision (\S+), content-type (\S+), and empty body
    path = expand_vars(get_next_match(), V)
    revision = expand_vars(get_next_match(), V)
    ctype = expand_vars(get_next_match(), V)
    body = ''
    token = V['token']
    headers = {
        'Revision': revision,
        'Content-Type': ctype,
    }
    request(
        put_to_qvarn, 'default', path, headers=headers, body=body, token=token)

    IMPLEMENTS WHEN client requests PUT (/[a-z0-9/${}]+) with token, revision (\S+), content-type (\S+), and body "(.+)"
    path = expand_vars(get_next_match(), V)
    revision = expand_vars(get_next_match(), V)
    ctype = expand_vars(get_next_match(), V)
    body = unescape(expand_vars(get_next_match(), V))
    token = V['token']
    headers = {
        'Revision': revision,
        'Content-Type': ctype,
    }
    request(
        put_to_qvarn, 'default', path, headers=headers, body=body, token=token)

    IMPLEMENTS WHEN client requests DELETE (/.+) with token
    path = get_next_match()
    path = expand_vars(path, V)
    token = V['token']
    request(delete_from_qvarn, 'default', path, token=token)

    IMPLEMENTS WHEN client requests DELETE (/.+) with token and body (.+)
    path = get_next_match()
    path = expand_vars(path, V)
    body = get_next_match()
    body = expand_vars(body, V)
    body = json.loads(body)
    token = V['token']
    request(delete_from_qvarn, 'default', path, token=token, body=body)

## UUID creation

    IMPLEMENTS GIVEN unique random identifier (\S+)
    import uuid
    name = get_next_match()
    V[name] = str(uuid.uuid4())

## API request result checking

    IMPLEMENTS THEN HTTP status code is (\d+) (.*)
    expected = int(get_next_match())
    actual = get_status()
    assertEqual(actual, expected)

    IMPLEMENTS THEN HTTP (\S+) header is (.+)
    header = get_next_match()
    qvarn_keys = get_qvarn('default')
    V['API_URL'] = qvarn_keys['url']
    value = expand_vars(get_next_match(), V)
    headers = get_headers()
    assertEqual(headers.get(header), value)

    IMPLEMENTS THEN remember HTTP (\S+) header as (.+)
    header = get_next_match()
    name = get_next_match()
    headers = get_headers()
    V[name] = headers.get(header)

    IMPLEMENTS THEN resource id is (\S+)
    import json
    name = get_next_match()
    body = get_json()
    print 'body:', body
    V[name] = body['id']

    IMPLEMENTS THEN revision is (\S+)
    import json
    name = get_next_match()
    body = get_json()
    V[name] = body['revision']

    IMPLEMENTS THEN revisions (\S+) and (\S+) are different
    rev1 = get_next_match()
    rev2 = get_next_match()
    assertNotEqual(V[rev1], V[rev2])

    IMPLEMENTS THEN revisions (\S+) and (\S+) match
    rev1 = get_next_match()
    rev2 = get_next_match()
    assertEqual(V[rev1], V[rev2])

    IMPLEMENTS THEN JSON body matches (.+)
    wanted = get_next_match()
    print 'wanted1', repr(wanted)
    wanted = expand_vars(wanted, V)
    print 'wanted2', repr(wanted)
    wanted = strfy(json.loads(wanted))
    actual = get_json()
    print 'actual ', repr(actual)
    print 'wanted3', repr(wanted)
    assertTrue(values_match(wanted, actual))

    IMPLEMENTS THEN body is "(.+)"
    wanted = unescape(expand_vars(get_next_match(), V))
    body = get_body()
    assertTrue(values_match(wanted, body))

    IMPLEMENTS THEN search result contains (.+)
    wanted1 = get_next_match()
    wanted2 = expand_vars(wanted1, V)
    wanted = strfy(json.loads(str(wanted2)))
    actual = get_json()
    print 'wanted1:', repr(wanted1)
    print 'wanted2:', repr(wanted2)
    print 'wanted:', repr(wanted)
    print 'actual:', repr(actual)
    assertTrue(actual['resources'])
    found = False
    for result in actual['resources']:
        if values_match(wanted, result):
            print 'MATCH!', repr(wanted), repr(result)
            found = True
            break
        print 'no match', repr(wanted), repr(result)
    assertTrue(found)

    IMPLEMENTS THEN search result does NOT contain (.+)
    wanted1 = get_next_match()
    wanted2 = expand_vars(wanted1, V)
    wanted = strfy(json.loads(wanted2))
    actual = get_json()
    print 'wanted1:', repr(wanted1)
    print 'wanted2:', repr(wanted2)
    print 'wanted:', repr(wanted)
    print 'actual:', repr(actual)
    found = False
    for result in actual['resources']:
        if values_match(wanted, result):
            found = True
    assertFalse(found)

    IMPLEMENTS THEN search result at index (\d+) has id (\S+)
    import json
    index = int(get_next_match())
    id_name = get_next_match()
    body = get_json()
    print 'body', repr(body)
    resources = body['resources']
    print 'resources', repr(resources)
    print 'len resources', len(resources)
    print 'index', index
    assert index < len(resources)
    obj = resources[index]
    print 'resource at index', repr(obj)
    print 'id', repr(obj['id'])
    V[id_name] = obj['id']

    IMPLEMENTS THEN search result has (\d+) resources
    wanted = int(get_next_match())
    body = get_json()
    print 'body', repr(body)
    resources = body['resources']
    print 'resources', repr(resources)
    print 'len resources', len(resources)
    assertEqual(wanted, len(resources))

    IMPLEMENTS THEN response has header WWW-Authenticate containing "(.+)"
    assert 0
