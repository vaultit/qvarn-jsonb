# Step implementations for data migration

This chapter shows the scenario step implementations for the
`qvarn-copy` test scenario.

    IMPLEMENTS GIVEN a running source Qvarn instance
    start_qvarn('source')

    IMPLEMENTS GIVEN a running target Qvarn instance
    start_qvarn('target')

    IMPLEMENTS FINALLY source Qvarn is stopped
    stop_qvarn('source')

    IMPLEMENTS FINALLY target Qvarn is stopped
    stop_qvarn('target')

    IMPLEMENTS WHEN user creates a person listener in source Qvarn for all changes
    V['scopes'] = ' '.join([
        'uapi_resource_types_id_get',
        'uapi_persons_get',
        'uapi_persons_post',
        'uapi_persons_id_get',
        'uapi_persons_id_delete',
        'uapi_persons_listeners_get',
        'uapi_persons_listeners_post',
        'uapi_persons_listeners_id_get',
        'uapi_persons_listeners_id_notifications_get',
        'uapi_persons_listeners_id_notifications_post',
        'uapi_persons_listeners_id_notifications_id_get',
        'uapi_set_meta_fields',
    ])
    token = create_token_for_user('source', '', V['scopes'])
    listener = {
        'type': 'listener',
        'notify_of_new': True,
    }
    request(
        post_to_qvarn, 'source', '/persons/listeners', body=listener, token=token)

    IMPLEMENTS THEN listener has id (\S+)
    name = get_next_match()
    print('name', repr(name))
    body = get_json()
    print('body', repr(body))
    V[name] = body['id']

    IMPLEMENTS THEN listener has revision (\S+)
    name = get_next_match()
    body = get_json()
    V[name] = body['revision']

    IMPLEMENTS WHEN user creates person in source Qvarn
    token = create_token_for_user('source', '', V['scopes'])
    person = {
        'names': ['James Bond'],
    }
    request(post_to_qvarn, 'source', '/persons', body=person, token=token)
    V['ID'] = get_json()['id']

    IMPLEMENTS THEN there is a notification for person listener LID notification id NID in source Qvarn
    token = create_token_for_user('source', '', V['scopes'])
    path = '/persons/listeners/{}/notifications'.format(V['LID'])
    request(get_from_qvarn, 'source', path, token=token)
    assertEqual(get_status(), 200)
    obj = get_json()
    V['NID'] = obj['resources'][0]['id']

    IMPLEMENTS WHEN user runs qvarn-copy
    qvarn_copy('source', 'target', ['person'])
    dump_qvarn('source', 'source.dump0', ['person'])
    dump_qvarn('target', 'target.dump0', ['person'])

    IMPLEMENTS THEN person ID in source and target Qvarns are identical
    stoken = create_token_for_user('source', '', V['scopes'])
    ttoken = create_token_for_user('target', '', V['scopes'])
    path = '/persons/{}'.format(V['ID'])
    src = request_resource('source', path, stoken)
    tgt = request_resource('target', path, ttoken)
    assertEqual(src, tgt)

    IMPLEMENTS THEN person listener LID in source and target Qvarns are identical
    path = '/persons/listeners/{}'.format(V['LID'])
    stoken = create_token_for_user('source', '', V['scopes'])
    ttoken = create_token_for_user('target', '', V['scopes'])
    src = request_resource('source', path, stoken)
    tgt = request_resource('target', path, ttoken)
    assertEqual(src, tgt)

    IMPLEMENTS THEN notification NID in person listener LID in source and target Qvarns are identical
    path = '/persons/listeners/{}/notifications/{}'.format(V['LID'], V['NID'])
    stoken = create_token_for_user('source', '', V['scopes'])
    ttoken = create_token_for_user('target', '', V['scopes'])
    src = request_resource('source', path, stoken)
    tgt = request_resource('target', path, ttoken)
    assertEqual(src, tgt)

    IMPLEMENTS WHEN user runs qvarn-dump on source Qvarn
    dump_qvarn('source', 'source.dump', ['person'])

    IMPLEMENTS WHEN user runs qvarn-dump on target Qvarn
    dump_qvarn('target', 'target.dump', ['person'])

    IMPLEMENTS THEN source and target dumps are bitwise identical
    cliapp.runcmd(['cmp', 'source.dump', 'target.dump'])

    IMPLEMENTS WHEN user deletes person ID from source Qvarn
    path = '/persons/{}'.format(V['ID'])
    delete_from_qvarn('source', path)
